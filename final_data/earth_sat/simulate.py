import numpy as np
import matplotlib.pyplot as plt
import exoplanet as xo
import pymc3 as pm
import theano.tensor as tt
from astropy import units as u
from astropy.constants import M_earth, M_sun, R_sun
from aesara_theano_fallback import aesara as theano




def load_input_params(filename):
    import pandas as pd
    
    planet_params_df = pd.read_csv(filename)

    planet_params = []
    for row in planet_params_df.iterrows():
        params = []
        params.append(row[1]['period'])
        params.append(row[1]['ecc'])
        params.append(row[1]['Tper'])
        params.append(row[1]['omega'])
        params.append(row[1]['Omega'])
        params.append(row[1]['inclination'])
        params.append(row[1]['mass'])


        planet_params.append(params)
    
    return planet_params





def create_orbit(n_planets, orbit_params):
    
    '''
    inputs:
    - n_planets = number of planets
    - orbit_params = orbital parameters for each planet arranged as a list of lists:
        - period = period in days
        - ecc = eccentricity 
        - t_periastron = The epoch of a reference periastron passage in days.
        - omega = argument of periapsis in radans
        - Omega = longitude of ascending node  
        - incl = inclination in radians
        - m_planet = mass of planet in Earth masses 
    '''
    

        
    period = []
    ecc = []
    Tper = [] 
    omega = [] 
    Omega = []  
    incl = []
    m_planet = []
    for ii in range(0, n_planets):
        period.append(orbit_params[ii][0])
        ecc.append(orbit_params[ii][1])
        Tper.append(orbit_params[ii][2])
        omega.append(orbit_params[ii][3])
        Omega.append(orbit_params[ii][4])
        incl.append(orbit_params[ii][5])
        m_planet.append(orbit_params[ii][6])

    orbit = xo.orbits.KeplerianOrbit(
        period = period,
        ecc = ecc, 
        t_periastron = Tper, 
        omega = omega, 
        Omega = Omega,  
        incl = incl,
        m_planet = m_planet)   
    
    
    return orbit





def simulate_data(
    n_planets, 
    sigma_rv, 
    sigma_ra,
    sigma_dec,
    plx,
    orbit_params,
    times_observed_rv = None,
    times_observed_astrometry = None,
    t_dur_rv = None, 
    n_obs_rv = None,
    t_dur_astrometry = None, 
    n_obs_astrometry = None 
    ):

    '''
    inputs:
    - orbit = keplerian orbit generated by exoplanet code
    - n_planets = number of planets
    - sigma_rv = standard deviation for RV simulated gaussian noise in as
    - sigma_ra = standard deviation for RA simulated gaussian noise in as
    - sigma_dec = standard deviation for declination simulated gaussian noise in as
    - plx = parallax of system
    - orbit_params = orbital parameters for each planet arranged as a list of lists of shape (7 x n_planets):
        - period = period in days
        - ecc = eccentricity 
        - t_periastron = The epoch of a reference periastron passage in days.
        - omega = argument of periapsis in radans
        - Omega = longitude of ascending node  
        - incl = inclination in radians
        - m_planet = mass of planet in Earth masses 
    - times_observed_rv = (default=None) the observed times for RV observations
    - times_observed_astrometry = (default=None) the observed times for astrometry observations
    - t_dur_rv = (default=None) duration of RV observations in days (only if we don't have a set times of observed observations)
    - n_obs_rv = (default=None) number of RV observations (only if we don't have a set times of observed observations)
    - t_dur_astrometry = (default=None) duration of astrometry observations (only if we don't have a set times of observed observations)
    - n_obs_astrometry = (default=None) number of astrometry observations (only if we don't have a set times of observed observations)
    
        
    '''
    
    if n_planets == 1:
        orbit_params = [orbit_params]
        
        
    #if times_observed_rv  != None then just define times_rv and linspace between min and max
    if times_observed_rv  != None:
        times_rv = np.linspace(np.min(times_observed_rv), np.max(times_observed_rv), 10000)

    #define start_time_RV, which will be used to determine the times to simulate 
    #if times_observed_RV and times_observed_astrometry aren't defined
    else:
        start_time_rv = np.inf
        for ii in range(0, n_planets):
            if orbit_params[ii][2] < start_time_rv:
                start_time_rv = orbit_params[ii][2]


        
        #define RV observation time
        #100000 is arbitrary large number finely spaced enough to show details in curve
        times_rv = np.linspace(start_time_rv, start_time_rv+t_dur_rv, 10000) 
        times_observed_rv = np.linspace(start_time_rv, start_time_rv+t_dur_rv, n_obs_rv)
        


    #if times_observed_astrometry  != None then just define times_rv and linspace between min and max
    if times_observed_astrometry  != None:
        times_astrometry = np.linspace(np.min(times_observed_astrometry), np.max(times_observed_astrometry), 10000)
    
    #define start_time_RV, which will be used to determine the times to simulate 
    #if times_observed_RV and times_observed_astrometry aren't defined    
    else:
        start_time_astrometry = np.inf
        for ii in range(0, n_planets):
            if orbit_params[ii][2] < start_time_astrometry:
                start_time_astrometry = orbit_params[ii][2]    


        #define astrometry observation time
        #100000 is arbitrary large number finely spaced enough to show details in curve
        times_astrometry = np.linspace(start_time_astrometry, start_time_astrometry+t_dur_astrometry, 10000) 
        times_observed_astrometry = np.linspace(start_time_astrometry, start_time_astrometry+t_dur_astrometry, n_obs_astrometry)


        
    orbit = create_orbit(n_planets, orbit_params)
    
    rv = orbit.get_radial_velocity(times_rv)
    rv_observed = orbit.get_radial_velocity(times_observed_rv)
    
    rv_orbit = rv.eval()

    if n_planets > 1:
        rv_orbit_sum = np.sum(rv_orbit, axis = 1)
    else:
        rv_orbit_sum = rv_orbit
        

    rv_observed = rv_observed.eval()
    if n_planets > 1:
        rv_observed_sum = np.sum(rv_observed, axis = 1)
    else:
        rv_observed_sum = rv_observed


    #-----------
    #-----------

    # determine and print the star position at desired times
    pos = theano.function([], orbit.get_star_position(times_astrometry, plx))()


    #pos = tt.sum(pos, axis=-1)

    x,y,z = pos


    # calculate rho and theta
    rho = tt.squeeze(tt.sqrt(x ** 2 + y ** 2))  # arcsec
    theta = tt.squeeze(tt.arctan2(y, x))  # radians between [-pi, pi]
    
    rho, theta = rho.eval(), theta.eval()
    
    #rho, theta = theano.function([], get_star_relative_angles(times_astrometry, plx))()


    rho_orbit = rho
    
    if n_planets > 1:
        rho_orbit_sum = np.sum(rho_orbit, axis = 1)
    else:
        rho_orbit_sum = rho_orbit

    theta_orbit = theta
    
    if n_planets > 1:
        theta_orbit_sum = np.sum(theta_orbit, axis = 1)
    else:
        theta_orbit_sum = theta_orbit
        
        
    # when summing over theta, position angle, we have to careful because position
    # angle has the range -pi to pi. So for only summing 2 thetas, we can subtract 
    # 2pi whenever theta_sum > pi and add 2pi whenever theta_sum < -pi to get back
    # in the correct range. Be careful though if modeling more than 2 planets, this
    # doesn't completely solve the problem!
    theta_orbit_sum[theta_orbit_sum >  np.pi] -= 2*np.pi
    theta_orbit_sum[theta_orbit_sum < -np.pi] += 2*np.pi


    # determine and print the star position at desired times
    pos_observed = theano.function([], orbit.get_star_position(times_observed_astrometry, plx))()


    #pos = tt.sum(pos, axis=-1)

    x_obs,y_obs,z_obs = pos_observed


    # calculate rho and theta
    rho_observed = tt.squeeze(tt.sqrt(x_obs ** 2 + y_obs ** 2))  # arcsec
    theta_observed = tt.squeeze(tt.arctan2(y_obs, x_obs))  # radians between [-pi, pi]
    
    rho_observed, theta_observed = rho_observed.eval(), theta_observed.eval()

    #rho_observed, theta_observed = theano.function([], get_star_relative_angles(times_observed_astrometry, plx))()

    
    if n_planets > 1:
        rho_observed_sum = np.sum(rho_observed, axis = 1)
    else:
        rho_observed_sum = rho_observed

    
    if n_planets > 1:
        theta_observed_sum = np.sum(theta_observed, axis = 1)
    else:
        theta_observed_sum = theta_observed
        
    
    #######
    #######
    #######

    # convert rho and theta into ra and dec
    ra_orbit = rho_orbit * np.sin(theta_orbit) # +ra is east
    dec_orbit = rho_orbit * np.cos(theta_orbit)  # +dec is north

    if n_planets > 1:
        ra_orbit_sum = np.sum(ra_orbit, axis = 1)
    else:
        ra_orbit_sum = ra_orbit

    
    if n_planets > 1:
        dec_orbit_sum = np.sum(dec_orbit, axis = 1)
    else:
        dec_orbit_sum = dec_orbit

    ra_observed = rho_observed * np.sin(theta_observed) # +ra is east
    dec_observed = rho_observed * np.cos(theta_observed)  # +dec is north




    
    #----------- 
    #----------- 
    #----------- simulate data
    #----------- 
    #----------- 

    
    if n_planets > 1:
        rv_sim = rv_observed
        rv_sim_sum = np.sum(rv_observed, axis = 1) + np.random.normal(0, sigma_rv, len(rv_observed))
    else:
        rv_sim = rv_observed + np.random.normal(0, sigma_rv, len(rv_observed))
        rv_sim_sum = rv_sim

    #-----------
    #-----------


    if n_planets > 1:
        ra_sim = ra_observed
        ra_sim_sum = np.sum(ra_sim, axis = 1) + np.random.normal(0, sigma_ra, len(ra_observed))
    
    else:
        ra_sim = ra_observed + np.random.normal(0, sigma_ra, len(ra_observed))
        ra_sim_sum = ra_sim
      
    
    
    if n_planets > 1:
        dec_sim = dec_observed 
        dec_sim_sum = np.sum(dec_sim, axis = 1) + np.random.normal(0, sigma_dec, len(dec_observed))
        
    else:
        dec_sim = dec_observed + np.random.normal(0, sigma_dec, len(dec_observed))
        dec_sim_sum = dec_sim

    
    times = [times_rv, times_observed_rv, times_astrometry, times_observed_astrometry]
    rv_results = [rv_orbit, rv_orbit_sum, rv_sim, rv_sim_sum]
    ra_results = [ra_orbit, ra_orbit_sum, ra_sim, ra_sim_sum]
    dec_results = [dec_orbit, dec_orbit_sum, dec_sim, dec_sim_sum]
   
    
    return [times, rv_results, ra_results, dec_results]



def plot_rv_signal(
    n_planets, 
    rv_orbit, 
    rv_orbit_sum, 
    rv_sim, 
    rv_sim_sum, 
    times_rv, 
    times_observed_rv,
    colors,
    planet_names):
    
    
    
    fig, ax = plt.subplots(1, 2, figsize = [18,10], sharey='row')
    fig.suptitle("RV Signal", fontsize = 45)
    ax0 = ax[0]
    ax1 = ax[1]
    
    
    if n_planets > 1:
        for ii in range(0, n_planets):
            ax0.plot(times_observed_rv, rv_sim.T[ii], 'o', color = colors[ii], label = planet_names[ii], alpha = 0.3)
    else:
        ax0.plot(times_observed_rv, rv_sim, 'o', color = colors[0], label = planet_names[0], alpha = 0.3)
    
    ax0.legend(fontsize = 27, loc = 2)
    ax0.set_xlabel("time [BJD]", fontsize = 27)
    ax0.set_ylabel("RV [m/s]", fontsize = 27)

    ax1.plot(times_observed_rv, rv_sim_sum, 'o', color = colors[n_planets], label = 'combined signal', alpha = 0.3)

    ax1.set_xlabel("time [BJD]", fontsize = 27)
    ax1.legend(fontsize = 27, loc = 2)

    fig.tight_layout()
    fig.show()
    
    return None

    

def plot_astrometry_signal(
    n_planets, 
    ra_orbit, 
    ra_orbit_sum, 
    ra_sim, 
    ra_sim_sum, 
    dec_orbit, 
    dec_orbit_sum, 
    dec_sim, 
    dec_sim_sum,
    times_astrometry,
    times_observed_astrometry,
    colors,
    planet_names):
    
    

    fig, ax = plt.subplots(2, 2, figsize = [13,10], sharex='col', sharey='row')
    fig.suptitle("Astrometric Signal", fontsize = 45)
    ax0 = ax[0][0]
    ax1 = ax[1][0]
    ax2 = ax[0][1]
    ax3 = ax[1][1]
    
    if n_planets > 1:
        for ii in range(0, n_planets):
            ax0.plot(times_observed_astrometry, ra_sim.T[ii], 'o', color = colors[ii], label = planet_names[ii])
    else:
        ax0.plot(times_observed_astrometry, ra_sim, 'o', color = colors[0], label = planet_names[0])
    
    ax0.set_ylabel(r"$\Delta \alpha \cos \delta$ ['']", fontsize = 27)
    for tick in ax0.get_xticklabels():
        tick.set_rotation(30)
    ax0.legend(fontsize = 27, loc = 2)
    
    
    
    if n_planets > 1:
        for ii in range(0, n_planets):
            ax1.plot(times_observed_astrometry, dec_sim.T[ii], 'o', color = colors[ii], label = planet_names[ii])
    else:
        ax1.plot(times_observed_astrometry, dec_sim, 'o',  color = colors[0], label = planet_names[0])

    
    ax1.set_ylabel(r"$\Delta \delta$ ['']", fontsize = 27)
    ax1.set_xlabel("time [BJD]", fontsize = 27)
    ax1.legend(fontsize = 27, loc = 2)

    


    
    ax2.plot(times_observed_astrometry, ra_sim_sum, 'o', color = colors[n_planets], label = 'combined signal')
    for tick in ax3.get_xticklabels():
        tick.set_rotation(30)
    ax2.legend(fontsize = 27, loc = 2)
    
    ax3.plot(times_observed_astrometry, dec_sim_sum, 'o', color = colors[n_planets], label = 'combined signal')
    ax2.set_xlabel("time [BJD]", fontsize = 27)
    ax3.legend(fontsize = 27, loc = 2)



    fig.tight_layout()
    fig.show()



    #######
    #######
    #######


    fig, ax = plt.subplots(1, 1, figsize = [10, 10])

    # plot simulated data
    ax.plot(ra_sim_sum, dec_sim_sum, 'o', color = colors[n_planets], label = "combined signal")

    ax.set_ylabel(r"$\Delta \delta$ ['']")
    ax.set_xlabel(r"$\Delta \alpha \cos \delta$ ['']")
    ax.invert_xaxis()
    ax.plot(0, 0, "k*")
    ax.set_aspect("equal", "datalim")
    ax.set_title("initial orbit")
    ax.legend()
    fig.show()
    
    return None





def simulate_and_plot(
    n_planets, 
    sigma_rv, 
    sigma_theta,
    sigma_rho,
    plx,
    orbit_params,
    colors,
    planet_names,
    times_observed_rv = None,
    times_observed_astrometry = None,
    t_dur_rv = None, 
    n_obs_rv = None,
    t_dur_astrometry = None, 
    n_obs_astrometry = None):
    
        
    simulate_results = simulate_data(
        n_planets,  
        sigma_rv, 
        sigma_theta,
        sigma_rho,
        plx,
        orbit_params,
        times_observed_rv,
        times_observed_astrometry,
        t_dur_rv, 
        n_obs_rv,
        t_dur_astrometry, 
        n_obs_astrometry)
    
    
    [[times_rv, times_observed_rv, times_astrometry, times_observed_astrometry],
     [rv_orbit, rv_orbit_sum, rv_sim, rv_sim_sum],
     [ra_orbit, ra_orbit_sum, ra_sim, ra_sim_sum],
     [dec_orbit, dec_orbit_sum, dec_sim, dec_sim_sum]]  = simulate_results
    
    
    plot_rv_signal(
        n_planets, 
        rv_orbit, 
        rv_orbit_sum, 
        rv_sim, 
        rv_sim_sum, 
        times_rv, 
        times_observed_rv,
        colors,
        planet_names)
        
        
    
    plot_astrometry_signal(
        n_planets, 
        ra_orbit, 
        ra_orbit_sum, 
        ra_sim, 
        ra_sim_sum, 
        dec_orbit, 
        dec_orbit_sum, 
        dec_sim, 
        dec_sim_sum,
        times_astrometry,
        times_observed_astrometry,
        colors,
        planet_names)
    
    return simulate_results














